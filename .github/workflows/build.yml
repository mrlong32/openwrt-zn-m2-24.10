name: ZN-M2 OpenWRT 24.10 Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 安装编译依赖
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-distutils rsync unzip zlib1g-dev file wget curl

      - name: 获取OpenWRT 24.10源码
        run: |
          git clone https://github.com/openwrt/openwrt.git openwrt
          cd openwrt
          git checkout openwrt-24.10
          git pull

      - name: 集成LibWRT组件
        run: |
          cd openwrt
          # 下载LibWRT主源码
          mkdir -p package/libwrt
          wget https://github.com/LiBwrt/openwrt-6.x/archive/refs/heads/master.zip -O libwrt.zip
          unzip -q libwrt.zip -d package/libwrt
          mv package/libwrt/*/* package/libwrt/
          rm -f libwrt.zip

      - name: 准备ZN-M2设备树文件
        run: |
          # 直接创建设备树文件，避免复杂的条件判断
          mkdir -p openwrt/libwrt-dts/ipq60xx
          cat > openwrt/libwrt-dts/ipq60xx/qcom-ipq6018-zn-m2.dts << 'EOF'
/dts-v1/;

#include "qcom-ipq6018.dtsi"
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
    model = "ZN M2";
    compatible = "zn,zn-m2", "qcom,ipq6018";

    aliases {
        led-boot = &led_status;
        led-failsafe = &led_status;
        led-running = &led_status;
        led-upgrade = &led_status;
    };

    leds {
        compatible = "gpio-leds";

        led_status: status {
            label = "zn-m2:blue:status";
            gpios = <&tlmm 47 GPIO_ACTIVE_LOW>;
            default-state = "on";
        };
    };

    keys {
        compatible = "gpio-keys";

        reset {
            label = "reset";
            gpios = <&tlmm 63 GPIO_ACTIVE_LOW>;
            linux,code = <KEY_RESTART>;
            debounce-interval = <60>;
        };
    };
};

&wifi0 {
    status = "okay";
};

&wifi1 {
    status = "okay";
};

&usb3 {
    status = "okay";
};
EOF

      - name: 添加ZN-M2设备支持（适配qualcommax目录结构）
        run: |
          cd openwrt
          # 检测正确的目录结构
          if [ -d "target/linux/qualcommax/dts/qcom" ]; then
            DTS_DIR="target/linux/qualcommax/dts/qcom"
            IMAGE_MK="target/linux/qualcommax/image/generic.mk"
            TARGET="qualcommax"
          else
            DTS_DIR="target/linux/ipq60xx/dts/qcom"
            IMAGE_MK="target/linux/ipq60xx/image/generic.mk"
            TARGET="ipq60xx"
          fi
          
          # 复制设备树文件
          mkdir -p $DTS_DIR
          cp libwrt-dts/ipq60xx/qcom-ipq6018-zn-m2.dts $DTS_DIR/
          
          # 修改Makefile添加设备
          cat >> $IMAGE_MK << 'EOF'
define Device/qcom_ipq6018_zn-m2
  $(call Device/FitImage)
  $(call Device/UbiFit)
  DEVICE_VENDOR := ZN
  DEVICE_MODEL := M2
  DEVICE_DTS := qcom-ipq6018-zn-m2
  DEVICE_PACKAGES := kmod-usb3 kmod-usb-dwc3-qcom kmod-leds-gpio
  SUPPORTED_DEVICES += zn-m2
endef
TARGET_DEVICES += qcom_ipq6018_zn-m2
EOF

      - name: 配置编译选项
        run: |
          cd openwrt
          echo "CONFIG_TARGET_$(echo $TARGET | tr '[:lower:]' '[:upper:]')=y" >> .config
          echo "CONFIG_TARGET_$(echo $TARGET | tr '[:lower:]' '[:upper:]')_generic=y" >> .config
          echo "CONFIG_TARGET_$(echo $TARGET | tr '[:lower:]' '[:upper:]')_generic_DEVICE_qcom_ipq6018_zn-m2=y" >> .config
          echo 'CONFIG_PACKAGE_luci=y' >> .config
          echo 'CONFIG_PACKAGE_luci-ssl=y' >> .config
          echo 'CONFIG_PACKAGE_libwrt=y' >> .config
          echo 'CONFIG_PACKAGE_kmod-wireguard=y' >> .config
          echo 'CONFIG_PACKAGE_wireguard-tools=y' >> .config

      - name: 更新 feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 下载软件包
        run: |
          cd openwrt
          make download -j$(nproc)
          find dl -size 0 -delete
          rm -rf $(find dl -type f -name "*.sha256" -print)

      - name: 编译固件
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s

      - name: 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: zn-m2-openwrt-24.10-firmware
          path: openwrt/bin/targets/*/*/*.bin
