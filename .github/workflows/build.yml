name: ZN-M2 OpenWRT 24.10 编译（最终修复版）

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 缓存编译环境
        uses: actions/cache@v3
        id: env-cache
        with:
          path: |
            ~/.ccache
            ./openwrt
          key: ${{ runner.os }}-openwrt-znm2-final-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-openwrt-znm2-final-

      - name: 安装系统依赖
        if: steps.env-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-distutils rsync unzip zlib1g-dev \
            file wget curl ccache

      - name: 获取OpenWRT源码并优先更新feeds（关键顺序调整）
        if: steps.env-cache.outputs.cache-hit != 'true'
        run: |
          # 克隆源码
          git clone https://github.com/openwrt/openwrt.git openwrt
          cd openwrt
          git checkout openwrt-24.10
          echo "=== 当前源码分支: $(git branch --show-current)"
          
          # 【核心修复】先更新feeds，再检查包（libcrypt在feeds中，不在默认源码）
          echo "=== 优先更新并安装feeds，获取额外包 ==="
          ./scripts/feeds update -a || { echo "feeds更新失败"; exit 1; }
          ./scripts/feeds install -a || { echo "feeds安装失败"; exit 1; }
          
          # 明确安装libcrypt相关包
          echo "=== 强制安装libcrypt包 ==="
          ./scripts/feeds install libcrypt || { echo "libcrypt安装失败"; exit 1; }
          
          # 检查libcrypt包是否存在（此时feeds已更新，应该能找到）
          echo "=== 检查libcrypt包是否存在 ==="
          if [ ! -d "package/feeds/packages/libcrypt" ] && [ ! -d "package/libs/libcrypt" ]; then
            echo "错误：仍未找到libcrypt包，列出所有可能的包路径："
            find ./ -name "libcrypt"  # 打印调试信息，显示所有含libcrypt的路径
            exit 1
          fi
          echo "=== libcrypt包检查通过 ==="

      - name: 集成LibWRT与设备树
        run: |
          cd openwrt
          
          if [ ! -d "package/libwrt" ]; then
            git clone https://github.com/LiBwrt/openwrt-6.x.git package/libwrt
            cd package/libwrt
            git checkout k6.12-nss
            cd ../..
          fi
          
          # 替换LibWRT中对libcrypt-compat的依赖为libcrypt
          echo "=== 替换LibWRT中的libcrypt-compat依赖 ==="
          find package/libwrt -name "Makefile" -exec sed -i 's/libcrypt-compat/libcrypt/g' {} +
          
          # 复制设备树
          DTS_FILE=$(find package/libwrt -name "ipq6000-m2.dts" | head -n1)
          [ -z "$DTS_FILE" ] && { echo "未找到设备树"; exit 1; }
          TARGET_DTS_DIR="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/"
          mkdir -p $TARGET_DTS_DIR
          cp $DTS_FILE $TARGET_DTS_DIR

      - name: 添加ZN-M2设备定义
        run: |
          cd openwrt
          IMAGE_MK="target/linux/qualcommax/image/ipq60xx.mk"
          sed -i '/qcom_ipq6000_m2/d' $IMAGE_MK
          cat << 'EOF' >> $IMAGE_MK
          define Device/qcom_ipq6000_m2
            $(call Device/FitImage)
            $(call Device/UbiFit)
            DEVICE_VENDOR := ZN
            DEVICE_MODEL := M2
            DEVICE_DTS := qcom/ipq6000-m2
            DEVICE_PACKAGES := kmod-usb3 kmod-usb-dwc3-qcom kmod-leds-gpio
            SUPPORTED_DEVICES += ipq6000-m2
          endef
          TARGET_DEVICES += qcom_ipq6000_m2
          EOF
          grep "qcom_ipq6000_m2" $IMAGE_MK || { echo "设备定义失败"; exit 1; }

      - name: 配置编译目标
        run: |
          cd openwrt
          rm -f .config
          
          # 基础配置
          echo "CONFIG_TARGET_qualcommax=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq60xx=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_qcom_ipq6000_m2=y" >> .config
          
          # 依赖配置
          echo "CONFIG_PACKAGE_libev=y" >> .config
          echo "CONFIG_PACKAGE_lm-sensors=y" >> .config
          echo "CONFIG_PACKAGE_libcrypt=y" >> .config  # 使用libcrypt
          echo "CONFIG_PACKAGE_libpam=y" >> .config
          echo "CONFIG_PACKAGE_libtirpc=y" >> .config
          echo "CONFIG_PACKAGE_glib2=y" >> .config
          echo "CONFIG_PACKAGE_libgpiod=y" >> .config
          echo "CONFIG_PACKAGE_liblzma=y" >> .config
          echo "CONFIG_PACKAGE_libnetsnmp=y" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-base-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_libwrt=y" >> .config
          
          make defconfig
          
          # 验证配置
          echo "=== 验证设备配置 ==="
          grep "CONFIG_TARGET_DEVICE_qualcommax_ipq60xx_DEVICE_qcom_ipq6000_m2=y" .config \
            || { echo "设备配置失败"; exit 1; }
          echo "=== 验证libcrypt配置 ==="
          grep "CONFIG_PACKAGE_libcrypt=y" .config \
            || { echo "libcrypt未配置"; exit 1; }

      - name: 编译固件
        run: |
          cd openwrt
          make -j$(nproc) V=s 2>&1 | tee compile.log
          
          # 检查产物
          find bin/targets/qualcommax/ipq60xx -name "*qcom_ipq6000_m2*.bin" \
            || { echo "未生成目标固件"; exit 1; }

      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: zn-m2-firmware
          path: |
            openwrt/bin/targets/qualcommax/ipq60xx/*qcom_ipq6000_m2*.bin
            openwrt/compile.log
          retention-days: 7
    
