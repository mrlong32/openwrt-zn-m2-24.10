name: ZN-M2 OpenWRT 24.10 编译（feeds更新修复版）

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 缓存编译环境
        uses: actions/cache@v3
        id: env-cache
        with:
          path: |
            ~/.ccache
            ./openwrt
          key: ${{ runner.os }}-openwrt-znm2-feeds-fix-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-openwrt-znm2-feeds-fix-

      - name: 安装系统依赖
        if: steps.env-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-distutils rsync unzip zlib1g-dev \
            file wget curl ccache

      - name: 获取OpenWRT源码并分步验证源（核心修复）
        if: steps.env-cache.outputs.cache-hit != 'true'
        run: |
          # 克隆源码
          git clone https://github.com/openwrt/openwrt.git openwrt
          cd openwrt
          git checkout openwrt-24.10
          echo "=== 当前源码分支: $(git branch --show-current)"
          
          # 【核心修复1：使用稳定镜像源，替换官方源】
          echo "=== 配置镜像feeds（解决官方源访问问题） ==="
          cat > feeds.conf.default << 'EOF'
          # 使用国内镜像源提高稳定性（解决访问超时问题）
          src-git base https://mirror.sjtu.edu.cn/openwrt/base.git
          src-git packages https://mirror.sjtu.edu.cn/openwrt/packages.git
          src-git luci https://mirror.sjtu.edu.cn/openwrt/luci.git
          src-git routing https://mirror.sjtu.edu.cn/openwrt/routing.git
          # 禁用问题源
          # src-git telephony https://mirror.sjtu.edu.cn/openwrt/telephony.git
          EOF
          cat feeds.conf.default  # 显示最终源配置
          
          # 清理旧缓存
          echo "=== 彻底清理旧feeds ==="
          rm -rf feeds/ .config
          rm -rf package/feeds/
          
          # 【核心修复2：分步更新每个源，定位失败点】
          echo "=== 分步更新feeds（逐个验证） ==="
          feeds=("base" "packages" "luci" "routing")
          for feed in "${feeds[@]}"; do
            echo "=== 开始更新 $feed 源 ==="
            ./scripts/feeds update -f -v $feed || {  # -v显示详细日志，-f强制更新
              echo "错误：$feed 源更新失败！详细日志："
              cat logs/feeds/$feed/*  # 打印该源的错误日志
              exit 1;
            }
          done
          
          # 【核心修复3：验证所有源是否成功拉取】
          echo "=== 验证所有源目录 ==="
          for feed in "${feeds[@]}"; do
            if [ ! -d "feeds/$feed" ]; then
              echo "错误：$feed 源未拉取成功，当前feeds目录："
              ls -l feeds/
              exit 1;
            fi
          done
          
          # 安装所有包并验证依赖
          echo "=== 安装所有feeds包 ==="
          ./scripts/feeds install -a -v || { echo "包安装失败"; exit 1; }
          
          # 安装缺失的依赖包（带重试）
          echo "=== 安装关键依赖 ==="
          missing_packages=(libcrypt libev libpam libtirpc liblzma libnetsnmp lm-sensors glib2 libgpiod)
          for pkg in "${missing_packages[@]}"; do
            echo "=== 安装 $pkg ==="
            ./scripts/feeds install -v $pkg || {
              echo "重试安装 $pkg ...";
              ./scripts/feeds install -v $pkg || {  # 失败后重试一次
                echo "$pkg 安装失败，可用包列表：";
                ./scripts/feeds search $pkg;
                exit 1;
              }
            }
          done

      - name: 集成LibWRT与设备树
        run: |
          cd openwrt
          
          if [ ! -d "package/libwrt" ]; then
            git clone https://github.com/LiBwrt/openwrt-6.x.git package/libwrt
            cd package/libwrt
            git checkout k6.12-nss
            cd ../..
          fi
          
          # 替换依赖引用
          find package/libwrt -name "Makefile" -exec sed -i 's/libcrypt-compat/libcrypt/g' {} +
          find package/libwrt -name "Makefile" -exec sed -i 's/libev-dev/libev/g' {} +
          
          # 复制设备树
          DTS_FILE=$(find package/libwrt -name "ipq6000-m2.dts" | head -n1)
          [ -z "$DTS_FILE" ] && { echo "未找到设备树"; exit 1; }
          TARGET_DTS_DIR="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/"
          mkdir -p $TARGET_DTS_DIR
          cp $DTS_FILE $TARGET_DTS_DIR

      - name: 添加ZN-M2设备定义
        run: |
          cd openwrt
          IMAGE_MK="target/linux/qualcommax/image/ipq60xx.mk"
          sed -i '/qcom_ipq6000_m2/d' $IMAGE_MK
          cat << 'EOF' >> $IMAGE_MK
          define Device/qcom_ipq6000_m2
            $(call Device/FitImage)
            $(call Device/UbiFit)
            DEVICE_VENDOR := ZN
            DEVICE_MODEL := M2
            DEVICE_DTS := qcom/ipq6000-m2
            DEVICE_PACKAGES := kmod-usb3 kmod-usb-dwc3-qcom kmod-leds-gpio
            SUPPORTED_DEVICES += ipq6000-m2
          endef
          TARGET_DEVICES += qcom_ipq6000_m2
          EOF
          grep "qcom_ipq6000_m2" $IMAGE_MK || { echo "设备定义失败"; exit 1; }

      - name: 配置编译目标
        run: |
          cd openwrt
          rm -f .config
          
          # 基础配置
          echo "CONFIG_TARGET_qualcommax=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq60xx=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_qcom_ipq6000_m2=y" >> .config
          
          # 依赖配置
          echo "CONFIG_PACKAGE_libcrypt=y" >> .config
          echo "CONFIG_PACKAGE_libev=y" >> .config
          echo "CONFIG_PACKAGE_libpam=y" >> .config
          echo "CONFIG_PACKAGE_libtirpc=y" >> .config
          echo "CONFIG_PACKAGE_liblzma=y" >> .config
          echo "CONFIG_PACKAGE_libnetsnmp=y" >> .config
          echo "CONFIG_PACKAGE_lm-sensors=y" >> .config
          echo "CONFIG_PACKAGE_glib2=y" >> .config
          echo "CONFIG_PACKAGE_libgpiod=y" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_libwrt=y" >> .config
          
          make defconfig
          
          # 验证配置
          for pkg in libcrypt libev libpam; do
            grep "CONFIG_PACKAGE_$pkg=y" .config || { echo "$pkg 未配置"; exit 1; }
          done
          grep "CONFIG_TARGET_DEVICE_qualcommax_ipq60xx_DEVICE_qcom_ipq6000_m2=y" .config \
            || { echo "设备配置失败"; exit 1; }

      - name: 编译固件
        run: |
          cd openwrt
          make -j$(nproc) V=s 2>&1 | tee compile.log
          
          # 检查产物
          find bin/targets/qualcommax/ipq60xx -name "*qcom_ipq6000_m2*.bin" \
            || { echo "未生成目标固件"; exit 1; }

      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: zn-m2-firmware
          path: |
            openwrt/bin/targets/qualcommax/ipq60xx/*qcom_ipq6000_m2*.bin
            openwrt/compile.log
          retention-days: 7
    
