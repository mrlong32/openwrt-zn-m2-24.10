name: ZN-M2 OpenWRT 24.10 编译流程 (最终优化版)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 缓存系统依赖和OpenWRT源码，减少重复下载
      - name: 缓存编译环境
        uses: actions/cache@v3
        id: env-cache
        with:
          path: |
            ~/.ccache
            ./openwrt
            /var/cache/apt/archives
          key: ${{ runner.os }}-openwrt-env-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-openwrt-env-

      - name: 安装编译依赖 (仅缓存未命中时执行)
        if: steps.env-cache.outputs.cache-hit != 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "=== [调试] 开始安装依赖，当前时间: $(date)"
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo apt-get -qq update || { echo "=== [错误] APT更新失败"; exit 1; }
          
          # 核心依赖列表
          dependencies=(
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib 
            gettext git libncurses5-dev libssl-dev python3 python3-distutils 
            rsync unzip zlib1g-dev file wget curl ccache
          )
          
          # 逐个安装并输出调试信息
          for pkg in "${dependencies[@]}"; do
            echo "=== [调试] 正在安装: $pkg"
            sudo apt-get -qq install "$pkg" || { echo "=== [错误] $pkg 安装失败"; exit 1; }
          done
          
          echo "=== [调试] 依赖安装完成，版本信息:"
          gcc --version | head -n1
          python3 --version

      - name: 获取OpenWRT源码 (仅缓存未命中时执行)
        if: steps.env-cache.outputs.cache-hit != 'true'
        run: |
          echo "=== [调试] 开始克隆OpenWRT源码，当前时间: $(date)"
          git clone https://github.com/openwrt/openwrt.git openwrt || { echo "=== [错误] 克隆失败"; exit 1; }
          cd openwrt
          git checkout openwrt-24.10 || { echo "=== [错误] 切换分支失败"; exit 1; }
          echo "=== [调试] 当前源码分支: $(git branch --show-current)"

      - name: 集成LibWRT组件 (带详细调试)
        run: |
          echo "=== [调试] 进入源码目录: $(pwd)"
          cd openwrt
          
          # 仅首次构建时克隆LibWRT
          if [ ! -d "package/libwrt" ]; then
            echo "=== [调试] 首次构建，克隆LibWRT仓库"
            git clone https://github.com/LiBwrt/openwrt-6.x.git package/libwrt || { echo "=== [错误] 克隆LibWRT失败"; exit 1; }
            cd package/libwrt
            git checkout k6.12-nss || { echo "=== [错误] 切换分支失败"; exit 1; }
          else
            echo "=== [调试] 使用缓存的LibWRT仓库"
            cd package/libwrt
            git pull || { echo "=== [警告] 拉取最新代码失败，使用缓存版本"; }
          fi
          
          echo "=== [调试] 当前LibWRT分支: $(git branch --show-current)"
          
          # 查找设备树文件 (修复路径拼接问题)
          echo "=== [调试] 搜索设备树文件..."
          DTS_FILE=$(find . -name "ipq6000-m2.dts" | head -n1)
          if [ -z "$DTS_FILE" ]; then
            echo "=== [错误] 未找到设备树文件"
            find . -name "ipq6000-*.dts"  # 列出相似文件辅助调试
            exit 1
          fi
          
          # 清理路径中的./前缀，避免复制时路径错误
          DTS_FILE=$(echo "$DTS_FILE" | sed 's|^\./||')
          echo "=== [调试] 清理后设备树路径: $DTS_FILE"
          
          # 验证源文件存在
          if [ ! -f "$DTS_FILE" ]; then
            echo "=== [错误] 源文件不存在: $DTS_FILE"
            exit 1
          fi
          
          # 复制设备树
          TARGET_DIR="../../target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/"
          mkdir -p "$TARGET_DIR" || { echo "=== [错误] 创建目标目录失败"; exit 1; }
          cp "$DTS_FILE" "$TARGET_DIR" || { echo "=== [错误] 复制失败"; exit 1; }
          
          echo "=== [调试] 设备树复制结果: $(ls -l $TARGET_DIR/ipq6000-m2.dts)"

      - name: 配置编译选项
        run: |
          cd openwrt
          echo "=== [调试] 生成配置文件"
          echo "CONFIG_TARGET_qualcommax=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq60xx=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_qcom_ipq6000_m2=y" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          make defconfig || { echo "=== [错误] 配置失败"; exit 1; }

      - name: 编译固件
        run: |
          cd openwrt
          echo "=== [调试] 开始编译，CPU核心数: $(nproc)"
          make -j$(nproc) V=s 2>&1 | tee compile.log || { echo "=== [错误] 编译失败"; exit 1; }

      - name: 上传固件和日志 (使用v4版本修复错误)
        uses: actions/upload-artifact@v4  # 已更新为v4版本
        with:
          name: zn-m2-firmware
          path: |
            openwrt/bin/targets/qualcommax/ipq60xx/*.bin
            openwrt/compile.log
          retention-days: 7
