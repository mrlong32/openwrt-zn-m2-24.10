name: 高效构建流水线

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 环境变量定义，便于维护
  PROJECT_NAME: my-app
  BUILD_DIR: ./build
  CACHE_DIR: ~/.cache
  DEPENDENCY_FILE: ./requirements.txt  # 依赖清单文件

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]  # 可扩展多版本测试

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 仅拉取最新提交，加快速度

      - name: 缓存依赖
        uses: actions/cache@v3
        id: dependency-cache
        with:
          path: |
            ${{ env.CACHE_DIR }}
            ./venv
          key: ${{ runner.os }}-deps-${{ hashFiles(env.DEPENDENCY_FILE) }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 安装系统依赖
        if: steps.dependency-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential \
            libssl-dev \
            && sudo rm -rf /var/lib/apt/lists/*  # 清理缓存减小镜像体积

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # 启用pip缓存

      - name: 安装项目依赖
        if: steps.dependency-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r ${{ env.DEPENDENCY_FILE }}
          pip freeze > installed_deps.txt  # 保存实际安装的依赖版本

      - name: 缓存构建产物
        uses: actions/cache@v3
        id: build-cache
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: 编译项目
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          source venv/bin/activate
          mkdir -p ${{ env.BUILD_DIR }}
          python setup.py build --build-base ${{ env.BUILD_DIR }}

      - name: 运行测试
        run: |
          source venv/bin/activate
          pytest tests/ --junitxml=./test-results.xml

      - name: 上传测试结果
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results.xml

      - name: 部署（仅主分支）
        if: github.ref == 'refs/heads/main' && success()
        run: |
          echo "部署 ${{ env.PROJECT_NAME }} 到生产环境"
          # 部署命令在这里
